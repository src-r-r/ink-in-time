scheduling:
  # @REPLACEME
  # Check out the list of `pytz` timezone values.
  my_timezone: "US/Pacific"
  # List of appointments to offer the user.
  appointments:
    "Short Consultation": 30
    "Full Full Hour": 60
    "Project Update": 15
    "Project Showcase": 180
  # Grace period in timedelta dict
  grace_period:
    hours: 6
  # How far ahead to plan
  workday:
    start:
      hour: 6
      minute: 30
    end:
      hour: 18
      minute: 00
  view_window:
    days: 60
calendars:
  # Currently free times not implemented...maybe in the future?
  free:
  blocked:
    # @REPLACEME
    # Copy the public ical link from your calendar program and drop it here.
    # Note `localhost:5002` is the mock calendar service used for testing.
    # If you're not doing testing, feel free to remove it.
    #
    # Calendars can either be a URL...
    - "https://mycalendar.com/"
    # - "http://localhost:5002/ics/maybe-their.ics/"
    # ...or a CalendarSource object...
    # - class: iit.cal.source.EtebaseCalendarSource
    #   kwargs:
    #     username: my_etesync_username
    #     password: my_etesync_password
    #   args:
organizer:
  # @REMPLACEME
  # required
  cn: "Rick Astley"
  # @REMPLACEME
  # Email attached to both the ics event and the email message
  email: "user@example.com"
  # optional, but makes you look important ðŸ˜†
  role: ""
email:
  meeting_link_generator: "src.meetinggen.jitsi:JitsiGenerator"
  # @REPLACEME
  # The email address associated with your "from" address. Might be
  # the same as the organizer email, but may be different. For example. Your
  # organizer email might be `jim@example.com`, but the `from` will be
  # `noreply@scheduling.example.com`.
  from: REPLACEME
  organizer:
    subject: "Upcoming meeting with {{ participant_cn }}"
  participant:
    subject: "Upcoming meeting with {{ organizer_cn }}"
  server:
    # +------------------+
    # | Production Email |
    # +------------------+
    # Look up your server's SMTP settings. The keywords are as follows:
    # host (required): the URL for the server
    # port (required): port of the server (typicall 465, but check your
    #                  email server docs)
    # port (username): Username for serve rlogin
    # port (username): the URL for the server
    # use_ssl (optional, default=True): Typically not required. Most email
    #   servers use ssl. Setting this to `False` is mainly meant for testing.
    #
    # @REPLACEME
    use_ssl: True
    host: smtp.example.com
    # @REPLACEME
    port: 465
    # @REPLACEME
    username: "username@example.com"
    # @REPLACEME
    password: "supersecret"
    # +------------+
    # | Test Email |
    # +------------+
    # This is used for testing. If you're not doing any testing or development,
    # feel free to remove this.
    # use_ssl: false
    # host: localhost
    # host: smtpdebug
    # port: 1025
# optionally, any variables you want passed in to templates can be specified
# below.
variables:
  # @replaceme
  organization_name: My cool Organization
ics:
  # Can be templated with jinja variables.
  # Variables that are passed in include:
  # - organizer_cn
  # - organizer_email
  # - organizer_role
  # - organizer_timezone
  # - participant_cn
  # - participant_email
  # - participant_timezone
  # - human_start
  # - raw_start
  # - human_end
  # - raw_end
  # - notes
  # - block
  # - raw_duration
  # - human_duration
  # - meeting_link
  summary: "{{ block }} between {{ organizer_cn }} and {{ participant_cn }}"
  # See https://arrow.readthedocs.io/en/latest/#supported-tokens
  # for format
  dt_format:
    start: "dddd MMMM M YYYY, HH:mm p"
    end: "HH:mm a ZZZ"
  # Optional -- the `humanize` function to call for durations
  humanize_function: "precisedelta"
  # Arguments for constructing the ical
  # Probably should not be changed,except for "prodid"
  # See https://icalendar.readthedocs.io/en/latest/usage.html#example
  # TODO: currently not read; need to implement
  meta:
    prodid: "-//Ink In Time Scheduler//mxm.dk//"
    version: 2.0

  # possibly deprecated -- ignore
  default_recipients:
    - user@localhost
site:
  # @REPLACEME
  # The base url that will be prepended to assets and links. Make sure this
  # includes the path, as well. For example, if you set the scheduling app
  # at `https://example.com/schedule`, put that as the `url_base`.
  url_base: http://127.0.0.1/schedule

  # URL to get back to the "main site"
  # Completely optional; if ommitted, a
  # backref will not be displayed.
  backref:
    url: http://127.0.0.1
    label: Back to Localhost

# This workflow allows for automated client follow-up.
# Each step will contain the following attributes:
#  `event`: Event type, wich can either be `init`
#           (The time when the initial invitation
#            email was sent), `event_start` (the
#            event start time), or `event_end`
#           (the event end time)
#  `delay`: (optional). timedelta kwargs to specify how long after the
#           event the task should be triggered. If not given, will be
#           triggered immediately.
#  `task`: Task the be invoked.
#  `task_kwargs`: Keyword arguments sent to the Task
tasks:
  - event: init
    task: iit.tasks.email.SendParticipantInvitation
  - event: init
    task: iit.tasks.email.SendHostInvitation
  - event: init
    task: iit.task.calendar.SetFollowupReminders
    task_kwargs:
      count: 3
      interval:
        - days: 7

# You know the drill...the ol' Python logging dict.
# Feel free to modify to your own amusement. Should work for 90% of the
# cases, though.
logging:
  version: 1
  disable_existing_loggers: true
  formatters:
    standard:
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    error:
      format: "%(levelname)s <PID %(process)d:%(processName)s> %(name)s.%(funcName)s(): %(message)s"
    mine:
      format: "[%(levelname)s] %(name)s %(message)s"

  handlers:
    console:
      class: logging.StreamHandler
      level: DEBUG
      formatter: mine
      stream: ext://sys.stdout

  loggers:
    "faker.factory":
      level: INFO
  root:
    level: DEBUG
    handlers: [console]
